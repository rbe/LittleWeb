@startuml

autonumber
hide footbox

participant "User" as User
participant "Browser" as Browser
participant "Authenticator" as Authenticator
participant "E-Mail Client" as EmailClient
participant "Dispatcher" as Dispatcher
participant "AuthenticatingController" as AuthController
participant "ProxyController" as ProxyController

User -> Browser ++ : Opens page /resource\nwithout token
Browser -> Dispatcher ++ : HTTP GET /resource
Dispatcher -> AuthController ++ : .process()
AuthController -> AuthController : Token received?
alt No token received
    Dispatcher <-- AuthController -- : Identify user\nrequest
    Browser <-- Dispatcher -- : Render "Access Request" page
    User <-- Browser -- : "Access Request" page
    User -> Browser ++ : Enter User ID
    note right
    First factor:
    * Email address is known (user and system)
    * An email is sent to which user needs access
    end note
    User -> Browser : Submit form
    Browser -> Dispatcher ++ : HTTP POST /sx/access_request
    Dispatcher -> AuthController ++ : .dispatch()
    AuthController -> AuthController : Verify user has access
    alt User has no rights to view resource
        ref over User, AuthController : Show "Error" page
    else User has rights to view resource
        AuthController -> AuthController : Create token exchange request
        AuthController -> AuthController : Send email
        Dispatcher <-- AuthController -- : Result
        Browser <-- Dispatcher -- : Sucess page
        User <-- Browser -- : Success page
        ref over User, EmailClient : Check mails
        User -> EmailClient ++ : Click token exchange link
        EmailClient -> Browser -- : Open browser: exchange link\nto sx_token
        Browser ++
        Browser -> Dispatcher ++ : HTTP GET /resource?token=...&hash=...
        Dispatcher -> AuthController ++ : .process()
        AuthController -> AuthController : Verify request\nparameter token/hash
        alt Token and hash invalid
            ref over User, AuthController : Show "Error" page
        else Token and hash valid
            Dispatcher <-- AuthController --
            note right
            Second factor
            * OTP
            end note
            Browser <-- Dispatcher -- : "Enter OTP" page
            User <-- Browser -- : "Enter OTP" page
            User -> Authenticator ++ : Lookup OTP
            Authenticator -> Authenticator : Generate OTP
            User <-- Authenticator -- : OTP
            User -> Browser ++ : Enter OTP
            User -> Browser : Submit form
            Browser -> Dispatcher ++ : OTP
            Dispatcher -> AuthController ++
            AuthController -> AuthController : Create token
            Dispatcher <-- AuthController -- : Token
            Browser <-- Dispatcher -- : HTTP 307 Redirect\nLocation: /resource\nSet-Cookie: ...
        end
    end
else Token received
    Browser -> Dispatcher ++ : HTTP GET /resource\nwith token
    Dispatcher -> ProxyController ++ : .dispatch()
    ProxyController -> ProxyController : Verify cookie: sx_token/sx_hash
    alt
        ref over User, ProxyController : Show "Access Request" page
    else
        ProxyController -> ProxyController : Process request
        Dispatcher <-- ProxyController -- : Result
        Browser <-- Dispatcher -- : Resource
        User <-- Browser -- : Resource
    end
end

@enduml
